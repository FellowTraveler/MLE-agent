from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain_core.language_models import BaseChatModel
from langchain_core.runnables import chain
from langchain_core.output_parsers import StrOutputParser
from snowflake.connector import connect

from cfg import load_config

def snowflake_config(config):
    snowflake_config = config["snowflake"]
    print(snowflake_config)
    # Create the Snowflake URL
    conn = connect(
        user=snowflake_config["user"],
        password=snowflake_config["password"],
        account=snowflake_config["account"],
        warehouse=snowflake_config["warehouse"],
        database=snowflake_config["database"],
        schema=snowflake_config["schema"]
    )

    return conn


def data_engineering_data_loading():
    # 1. Welcome the user to the MLE-agent
    print("Welcome to the MLE-agent!")

    # 2. Inform them about the current stage
    print("You are currently in the Data Engineering stage.")

    # 3. Ask the user to choose a data store
    print("Please choose a data store by entering the corresponding number:")
    print("1. Snowflake")
    print("2. Databricks")
    print("3. AWS S3")

    # 4. Process user input
    choice = input("Enter your choice (1, 2, or 3): ")

    # 5. Respond according to the user's choice
    data_stores = {
        '1': 'Snowflake',
        '2': 'Databricks',
        '3': 'AWS S3'
    }

    # Validate the user input
    if choice in data_stores:
        print(f"MLE-agent will now help you to load data from {data_stores[choice]}.")
    else:
        print("Invalid choice. Please run the program again and select 1, 2, or 3.")


@chain
def data_load_agent(input: str, llm: BaseChatModel):
    """
    Analyze the user's current ML development stage based on their input description.

    Args:
        input (str): The user's input describing their current work.
        llm (BaseChatModel): The language model used for processing the input.

    Returns:
        MLDevelopmentStage: Enum representing the identified ML development stage.
    """
    output_parser = StrOutputParser()
    prompt = PromptTemplate(
        template="""
        You play as a professional data scientist. You are currently in the Data Engineering stage. You will understand 
        users input and generate code to help users load data from Snowflake step by step. Please import the necessary
        packages to make sure the code can run successfully.
        
        First, you should understand users' input and generate a SQL query to load data from Snowflake. 
        Do not add ; at the end of the query.
        
        The snowflake credentials are stored in ../snowflake_key.json. Please make sure to use the file to
        load the credentials and connect to snowflake.
        
        Then, you should write code to execute the SQL query and load the data into a DataFrame. 
        Remember to close the connection.
        
        Finally, you will write code to show some data from the DataFrame.
        
        The output should be a pure python code block including above both that can be run to load data from Snowflake.
        Do not include ``` in front of and after the code block.
        
        
        
        The user's input description is: {input}
        The output:
        """,
        input_variables=["input"]
    )

    chain = prompt | llm | output_parser
    return chain.invoke({"input": input})


if __name__ == "__main__":
    # Assuming your configuration file is named 'config.json'

    data_engineering_data_loading()

    config = load_config('open_ai_key.json')
    OPENAI_API_KEY = config["OPENAI_API_KEY"]

    llm = ChatOpenAI(api_key=OPENAI_API_KEY)

    # prompt = "Show me top 5 records from IMDB_TRAIN"
    prompt = "I want analyze IMDB_TRAIN dataset and use it to train a sentiment analysis model"

    data_load_code = data_load_agent.invoke(
        input=prompt,
        llm=llm  # Assuming 'llm' is your instantiated language model
    )

    # we can visualize what sql query is generated by the LLM
    print(data_load_code)

    with open("imdb_project/data_load_GENERATED.py", "w") as py_file:
        py_file.write(data_load_code)

    print(data_load_code)
